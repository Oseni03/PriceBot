// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  id           String         @id @default(uuid())
  platforms    UserPlatform[]
  email        String         @unique
  firstName    String?
  username     String?
  languageCode String?
  messages     Message[]
  products     Product[]
  feedbacks    Feedback[]
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt

  // Credit system fields
  credits               Int              @default(100) // Free credits on signup
  flutterwaveCustomerId String?          @unique
  creditPurchases       CreditPurchase[]
  creditUsage           CreditUsage[]
}

model Message {
  id        String        @id @default(uuid())
  text      String
  sender    MessageSender
  timestamp DateTime      @default(now())
  updatedAt DateTime      @updatedAt

  User   User   @relation(fields: [userId], references: [id])
  userId String
}

model Product {
  id            String   @id @default(uuid())
  name          String
  platform      String
  target_price  Int?
  url           String
  tracking_type String
  prices        Price[]
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  User   User?   @relation(fields: [userId], references: [id])
  userId String?
}

model Price {
  id        String   @id @default(uuid())
  amount    Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  Product   Product? @relation(fields: [productId], references: [id])
  productId String?
}

model UserPlatform {
  id         String   @id @default(uuid())
  platformId String // The user's ID on the specific platform
  platform   Platform @default(TELEGRAM)
  user       User     @relation(fields: [userId], references: [id])
  userId     String
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@unique([platform, platformId])
  @@unique([platform, userId])
}

model Feedback {
  id        String         @id @default(uuid())
  type      FeedbackType
  message   String
  status    FeedbackStatus @default(PENDING)
  user      User           @relation(fields: [userId], references: [id])
  userId    String
  createdAt DateTime       @default(now())
  updatedAt DateTime       @updatedAt
}

enum Platform {
  TELEGRAM
  WHATSAPP
}

enum MessageSender {
  USER
  BOT
}

enum FeedbackType {
  BUG
  FEATURE
}

enum FeedbackStatus {
  PENDING
  IN_PROGRESS
  COMPLETED
  REJECTED
}

model CreditPurchase {
  id                       String   @id @default(uuid())
  user                     User     @relation(fields: [userId], references: [id])
  userId                   String
  amount                   Float
  credits                  Int
  currency                 String   @default("USD")
  status                   String
  flutterwaveTransactionId String?  @unique
  flutterwaveTxRef         String?  @unique
  metadata                 Json?
  createdAt                DateTime @default(now())
  updatedAt                DateTime @updatedAt
}

model CreditUsage {
  id          String   @id @default(uuid())
  user        User     @relation(fields: [userId], references: [id])
  userId      String
  creditsUsed Int
  action      String // The action that consumed the credits
  metadata    Json? // Additional information about the usage
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@index([userId, createdAt])
}
